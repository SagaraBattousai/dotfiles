"Start Pathogen Plugin Manager
execute pathogen#infect()

"==============================================================="
"=======================Setting & Mappings======================"
"==============================================================="
"The Origional 8
syntax on
set number
set expandtab
set smarttab
set shiftwidth=2
filetype indent on
filetype on
filetype plugin on
"==============================================================="
set tabstop=2

set encoding=utf-8

set hlsearch

"new session command to ty out
set sessionoptions+=resize

"Coc Vim example selection (Trial run)
set updatetime=300 "Although this is for backup its also for hover!
"I quite like the sign column popping up

" Note: ALE is removed for now!
" let g:ale_disable_lsp = 1
" let g:airline#extensions#ale#enabled = 1
"
"The rest of the commands will be in the following file:
runtime coc_vimrc.vim

"End of Coc Vim trial run

" NOTE: This location lists is not understood as well as it should be but
" I don't have time (yet) to learn it properly. For now just set command to
" open the list so I can see the errors I think coc will put in for me
" (may require CocDiagnostics to be run first?!)
nnoremap <C-l> :lopen<cr>



"let mapleader = "`" "(\ is the default, NOTE: for when commented out)

nmap <Enter> o<Esc>

map j gj
map k gk

" nnoremap \l :%s/\s\+$//e<CR>
nnoremap <leader>l :%s/\s\+$//e<CR>

" noremap \h :noh<CR>
noremap <leader>h :noh<CR>

" noremap <leader>f :ALEFix<CR> " may comment out for now due to Coc
" Black cant format selections
" xmap <leader>f <Plug>(coc-format-selected)
" nmap <leader>f <Plug>(coc-format-selected)
nmap <leader>f <Plug>(coc-format)

"Tab Commands
nnoremap <C-t>n :tabnew<cr>
nnoremap <C-t>d :tabclose<cr>
nnoremap <C-t>o :tabonly<cr>
nnoremap <C-t><right> :tabnext<cr>
nnoremap <C-t><left> :tabprevious<cr>
nnoremap <C-t><up> :tabfirst<cr>
nnoremap <C-t><down> :tablast<cr>
nnoremap <C-t>i :tabs<cr>
nnoremap <C-t>m :tabmove<cr>
nnoremap <C-t><C-t> :tabnext<cr>
"Use CTRL-W gf/F and learn CTRL-W i (seems very cool)
"
"New Tab Command, May need to change 02/04/22
nnoremap <C-S-Right> :tabnext<cr>
nnoremap <C-S-Left> :tabprevious<cr> 


"==============================================================="
"========================Window Settings========================"
"==============================================================="

                        "SplitCommands"
                        "============="
" Could Keep these, and may well add back in, but limiting for now
" in case I want to use elsewhere or fore bespoke stuff
" like mapping j to gj

"nnoremap <C-j> <C-w>j
"nnoremap <C-k> <C-w>k
"NOTE: Below has been used elsewhere so if we uncomment this be warned
"nnoremap <C-l> <C-w>l
"nnoremap <C-h> <C-w>h

nnoremap <C-Up> <C-w>k
nnoremap <C-Down> <C-w>j
nnoremap <C-Left> <C-w>h
nnoremap <C-Right> <C-w>l

nnoremap <C-A-Right> <C-w>+
nnoremap <C-A-Left> <C-w>-
nnoremap <C-A-'> <C-W>R

set splitbelow
set splitright

" nnoremap <C-_> <C-w>_
" nnoremap <C--> <C-w>-
" nnoremap <C-\|> <C-w>\|
" nnoremap <C-=> <C-w>=
noremap zz <C-w>_ \| <C-w>\|
noremap z= <C-w>=


"==============================================================="
"======================Terminal Settings========================"
"==============================================================="

nnoremap <leader>t :ter ++close<cr>
tnoremap <leader>t <C-w>:ter ++close<cr>

" tnoremap <leader><C-[> <C-w>:q!<cr>
tnoremap <leader>q <C-w>:q!<cr>
tnoremap <leader><C-[> <C-w>N

" Terminal Split Commands
tnoremap <C-Up> <C-w>k
tnoremap <C-Down> <C-w>j
tnoremap <C-Left> <C-w>h
tnoremap <C-Right> <C-w>l

"============================================================================="
"============================Colour Scheme Settings==========================="
"============================================================================="
set t_Co=256
set background=dark
colorscheme sanoBattousai

"To remove
"hi Number guibg=NONE ctermbg=NONE

"============================================================================="
"============================Tab Auto Complete================================"
"============================================================================="

"Old school (Non-Coc) tab auto complete which is just search for other text
"Lost origional tab auto complete, trying new
" function! Tab_Or_Complete()
"     if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
"       return "\<C-P>"
"     else
"       return "\<Tab>"
"     endif
"   endfunction
" inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>



"set dictionary="/usr/dict/words"
set wildmode=longest,list,full
set wildmenu

"=ALE






"============================================================================="
"============================Nerdtree Settings================================"
"============================================================================="
" Start nerdtree when vim starts if no file specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc()==0 && !exists("s:std_in") | NERDTree | endif


" Start and close NerdT.
nmap <C-n> :NERDTreeToggle<CR>

" close vim if only window left is NerdT.
autocmd bufenter * if (winnr("$")==1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" maybe use later let NERDTreeIgnore=['\c^ntuser\..*']
"
"
"

set backspace=indent,eol,start

if has("win32")
  set shell=pwsh.exe
  set shellcmdflag=-NoLogo\ -NonInteractive\ -Command
  set shellpipe=|
  set shellredir=>
endif

if !has("gui_running") " and win32 or is okay without?
  set t_ut=""
endif


